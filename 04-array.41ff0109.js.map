{"mappings":"AAAA,MAmDMA,EAAY,CAChB,CAAEC,MAAO,SAAUC,KAAM,WAAYC,KAAM,KAAMC,OAAQ,MACzD,CAAEH,MAAO,QAASC,KAAM,SAAUC,KAAM,KAAMC,OAAQ,MACtD,CAAEH,MAAO,QAASC,KAAM,QAASC,KAAM,KAAMC,OAAQ,MACrD,CAAEH,MAAO,SAAUC,KAAM,QAASC,KAAM,KAAMC,OAAQ,MACtD,CAAEH,MAAO,SAAUC,KAAM,SAAUC,KAAM,KAAMC,OAAQ,MACvD,CAAEH,MAAO,UAAWC,KAAM,UAAWC,KAAM,KAAMC,OAAQ,MACzD,CAAEH,MAAO,UAAWC,KAAM,SAAUC,KAAM,KAAMC,OAAQ,OA8BpDC,GAPUL,EAAUM,QAAO,EAACH,KAAEA,KAAWA,GAAQ,MAAQA,EAAO,OACrDH,EAAUO,KAAI,EAACN,MAAEA,EAAKC,KAAEA,KAAW,CAACD,EAAOC,KACxC,IAAIF,GAAWQ,MAAK,CAACC,EAAGC,IAAMD,EAAEN,KAAOO,EAAEP,OACzCH,EAAUW,QAAO,CAACC,EAAKC,IAAOD,GAAOC,EAAET,OAASS,EAAEV,OAAO,GAEnD,IADLH,EAAUO,KAAIM,IAAM,IAAKA,EAAGC,KAAMD,EAAET,OAASS,EAAEV,UACxBK,MAAK,CAACC,EAAGC,IAAMD,EAAEK,KAAOJ,EAAEI,OACpD,CAtFhB,qBACA,cACA,qBACA,uBACA,gBACA,YACA,yBACA,iBACA,QACA,iBACA,qBACA,eACA,cACA,iBACA,cACA,mBACA,oBACA,uBACA,gBACA,gBACA,uBACA,eACA,eACA,kBACA,6BACA,gBACA,qBACA,mBACA,qBACA,kBACA,gBACA,eACA,mBACA,eACA,gBACA,kBACA,eACA,gBACA,eACA,kBACA,iBACA,mBACA,mBACA,mBACA,qBACA,iBACA,kBACA,kBAuC4BN,MAAK,CAACC,EAAGC,IAAMD,EAAEM,cAAcL,KA1B5C,CACf,MACA,OACA,MACA,MACA,MACA,MACA,MACA,YACA,YACA,WACA,OACA,MACA,SACA,YACA,OACA,OACA,OAUgCC,QAAO,CAACC,EAAKC,KACxCD,EAAIC,KACPD,EAAIC,GAAK,GAEXD,EAAIC,KACGD,IACN,KACHI,QAAQC,IAAIZ","sources":["src/js/04-array.js"],"sourcesContent":["const people = [\n  'Rutherford, Ernest',\n  'Sagan, Carl',\n  'Marconi, Guglielmo',\n  'Maxwell, James Clerk',\n  'Newton, Isaac',\n  'Nye, Bill',\n  'Oppenheimer, J. Robert',\n  'Pasteur, Louis',\n  'Plato',\n  'Reagan, Ronald',\n  'Roosevelt, Eleanor',\n  'Becker, Carl',\n  'Bohr, Niels',\n  'Carson, Rachel',\n  'Salk, Jonas',\n  'Sanger, Margaret',\n  'Sartre, Jean-Paul',\n  'Shakespeare, William',\n  'Sontag, Susan',\n  'Tesla, Nikola',\n  'Thoreau, Henry David',\n  'Turing, Alan',\n  'Wilde, Oscar',\n  'Woolf, Virginia',\n  'Wright, Orville and Wilbur',\n  'Goodall, Jane',\n  'Gould, Stephen Jay',\n  'Hawking, Stephen',\n  'Heisenberg, Werner',\n  'Hertz, Heinrich',\n  'Hubble, Edwin',\n  'Kaku, Michio',\n  'Kepler, Johannes',\n  'Leakey, Mary',\n  'Lovelace, Ada',\n  'Mandela, Nelson',\n  'Mann, Thomas',\n  'Chomsky, Noam',\n  'Curie, Marie',\n  'Darwin, Charles',\n  'Dyson, Freeman',\n  'Einstein, Albert',\n  'Faraday, Michael',\n  'Feynman, Richard',\n  'Franklin, Benjamin',\n  'Freud, Sigmund',\n  'Gandhi, Mahatma',\n  'Gibran, Kahlil',\n];\n\nconst inventors = [\n  { first: 'Albert', last: 'Einstein', year: 1879, passed: 1955 },\n  { first: 'Isaac', last: 'Newton', year: 1643, passed: 1727 },\n  { first: 'Marie', last: 'Curie', year: 1867, passed: 1934 },\n  { first: 'Nikola', last: 'Tesla', year: 1856, passed: 1943 },\n  { first: 'Thomas', last: 'Edison', year: 1847, passed: 1931 },\n  { first: 'Galileo', last: 'Galilei', year: 1564, passed: 1642 },\n  { first: 'Charles', last: 'Darwin', year: 1809, passed: 1882 },\n];\n\nconst vehicles = [\n  'Car',\n  'Dirt',\n  'Bus',\n  'Bus',\n  'Bus',\n  'Bus',\n  'Car',\n  'Spaceship',\n  'Spaceship',\n  'Zeppelin',\n  'Dirt',\n  'Car',\n  'Segway',\n  'Spaceship',\n  'Dirt',\n  'Dirt',\n  'Car',\n];\n\nconst fifteen = inventors.filter(({ year }) => year >= 1500 && year < 1600);\nconst fullName = inventors.map(({ first, last }) => [first, last]);\nconst yearsSorted = [...inventors].sort((a, b) => a.year - b.year);\nconst yearsOfLive = inventors.reduce((acc, i) => (acc += i.passed - i.year), 0);\nconst newInventors = inventors.map(i => ({ ...i, live: i.passed - i.year }));\nconst sortedYearsOfLive = [...newInventors].sort((a, b) => a.live - b.live);\nconst alphaName = [...people].sort((a, b) => a.localeCompare(b));\nconst vehiclesQuontity = vehicles.reduce((acc, i) => {\n  if (!acc[i]) {\n    acc[i] = 0;\n  }\n  acc[i]++;\n  return acc;\n}, {});\nconsole.log(vehiclesQuontity);\n"],"names":["$b78021060e3af02b$var$inventors","first","last","year","passed","$b78021060e3af02b$var$vehiclesQuontity","filter","map","sort","a","b","reduce","acc","i","live","localeCompare","console","log"],"version":3,"file":"04-array.41ff0109.js.map"}